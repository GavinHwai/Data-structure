/* 
 * BubbleSort.cpp 
*  交换排序之——冒泡排序
 *  Created on: 2015.07.26
 *      Author: Ye kangfei
 */  
  
#include <iostream> 
using namespace std;

void swap(int &a,int &b)
{
    int temp;
    temp=a;
    a=b;
    b=temp;
}

void BubbleSort (int* array, int length) {  
    int i,j,k,flag;

    for (i=0; i<length-1; i++){          //从无序序列的第1个元素开始，直至完全有序
        flag=false;                      //表示本趟冒泡是否发生交换的标志
        for (j=length-1; j>i; j--) 
            if(array[j-1]>array[j]){
                swap(array[j-1],array[j]);  
                flag=true;
            }
            
        cout<<i+1<<"st trip："<<endl;   //输出每轮排序结果，可以看出排序工进行了几轮，注意要在判断flag==false之前
        for (k=0; k<length; k++)  
            cout << array[k] << " ";  
        cout << endl;  

        if(flag==false) //检查本趟冒泡是否发生交换，若无则表明已经有序可结束排序，
                return;
    }  
}

int main() {  
    const int n=6;  
    int array[6] = {4, 5, 1, 2, 6 , 3};  
  
    cout<<"Initial sequence："<<endl;
    for (int i=0; i<n; i++)         //输出初始排序序列
            cout << array[i] << " ";  
    cout << endl << endl;  
  
    BubbleSort(array, n);           //调用函数
  
    cout<<endl<<"Ordered sequence："<<endl;
    for (int i=0; i<n; i++)         //输出排序结果
        cout << array[i] << " ";  
    cout << endl << endl;  
  
    return 0;  
}
/**
讲解：
冒泡排序可以从前往后或者从后往前，本例实现从后往前；
假设需排序序列长度为N,则构造数组Array[N]，
总共遍历N-1次，每一次遍历从最后一个元素开始与前一个元素两两比较，直至与当前位置比较（也就是乱序序列的第一个元素），
若逆序则互换位置，经过每一次遍历，有序序列长度加1。当在遍历的过程中若发现没有逆序组合存在，则直接返回，排序完成。

性能分析：
时间效率：
最好情况：
所给序列为有序序列，遍历一轮发现没有逆序组合，则直接返回，比较次数为N-1次，移动次数为0；

最坏情况：
所给序列为逆序序列，共需遍历N-1轮，每一轮比较N-i次，即(1到N-1的累加和)，N(N-1)/2;
每一次比较的结果都是需要调用一次swap函数，即移动3次，即共需N(N-1)*3/2，即空间复杂度为O(N^2);;

平均情况：
O(N^2);
空间效率：
交换的时候，仅使用了常数个（1个）辅助单元，因而空间复杂度为O（1）；

稳定性：
由于两两比较时只有逆序组合才会调用交换函数，所有等值的两个关键字相对次序不变，稳定。

*/
