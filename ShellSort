/*
*  插入排序之——希尔排序
*  Created on: 2015/7/24
*      Author: Ye Kangfei
*/
#include <iostream> 
using namespace std;

void ShellSort (int* array, int length) {  
	int i,j,k,p=1;

	for (int dk=length/2;dk>=1;dk=dk/2,p++){	//步长变化
	    for (i=dk+1; i<=length; ++i)     
	        if (array[i] < array[i-dk]) {  		//将array[i]插入有序表
	            array[0] = array[i];      		//暂存array[0]，
	            for (j=i-dk;j>0 && array[0] < array[j];j-=dk)
	            	array[j+dk]=array[j];		//记录后移，查找插入的位置
	            array[j+dk]=array[0];
	        }//end if
	        
     	cout<<p<<"st trip："<<endl; //输出每轮排序结果
	    for (k=1; k<=length; k++)  
	        cout << array[k] << " ";  
    	cout << endl;  
	}
}  
  
int main() {  
    const int n=10;  
    int array[11] = {0, 50, 26, 38, 80, 70 , 90 , 8 , 30 , 40 , 20};  
  
    cout<<"Initial sequence："<<endl;
    for (int i=1; i<n+1; i++)   //输出初始排序序列
            cout << array[i] << " ";  
    cout << endl << endl;  
  
    ShellSort(array, n);       //调用函数
  
    cout<<endl<<"Ordered sequence："<<endl;
    for (int i=1; i<n+1; i++)   //输出排序结果
        cout << array[i] << " ";  
    cout << endl << endl;  
  
    return 0;  
}

/*
讲解：
希尔排序(Shell's Sort), 又称"缩小增量排序"(Diminishing Increment Sort), 是插入排序的一种.
主要思想是: 先将整个记录, 通过间隔分成若干个子序列, 分别进行插入排序, 待整个序列基本有序时, 再进行一次插入排序.，
减少了其复制的次数，速度要快很多。希尔排序的时间复杂度与增量序列的选取有关。
当相同的记录分到不同的子表中时，可能会改变他们之间的相对次序，所以是不稳定的。

性能分析：
时间效率：

空间效率：
仅使用了常数个辅助单元，所以空间复杂度为O(1).

*/
