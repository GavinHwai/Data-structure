/*
*  插入排序之——折半插入排序
*  Created on: 2015/7/24
*      Author: Ye Kangfei
*/
#include <iostream> 
using namespace std;

void BInsertSort (int* array, int length) {  
	int i,j,k;

    for (i=2; i<=length; ++i){        //从第2个元素开始，依次将元素插入到已排序序列 
        if (array[i] < array[i-1]) {  //比较，若小于前驱元素，则插入有序表
            array[0] = array[i];      //复制为哨兵，array[0]不存放元素，
            array[i] = array[i-1];    //移动元素
  
            for (j=i-2; array[0] < array[j]; --j) //顺次移动之后的元素,直到移动至不小于前驱元素
                array[j+1] = array[j];  
            array[j+1] = array[0]; //填充位置 ，array[j+1]也就是目前最近一次后移元素的初始位置
        } 

	    cout<<i-1<<"st trip："<<endl; //输出每轮排序结果
	    for (k=1; k<=length; k++)  
	        cout << array[k] << " ";  
    	cout << endl;  
    }
}  
  
int main() {  
    const int n=6;  
    int array[7] = {0, 4, 5, 1, 2, 6 , 3};  
  
    cout<<"Initial sequence："<<endl;
    for (int i=1; i<n+1; i++)   //输出初始排序序列
            cout << array[i] << " ";  
    cout << endl << endl;  
  
    BInsertSort(array, n);       //调用函数
  
    cout<<endl<<"Ordered sequence："<<endl;
    for (int i=1; i<n+1; i++)   //输出排序结果
        cout << array[i] << " ";  
    cout << endl << endl;  
  
    return 0;  
}

/*
讲解：
假设需排序序列长度为N,则构造数组Array[N+1],Array[0]作为哨兵，作用如下阐述。
默认第一个元素为有序序列，将第二个元素开始插入共需N-1次；
每次插入过程中，先查找当前元素（第i个元素）的插入位置k（若不比前驱元素小，则保持位置不变————由此也说明该算法的稳定的）
与直接插入不同，折半插入排序是先找好插入点再移动而不是一边比较一边插入，


性能分析：
时间效率：在排序过程中（不做特殊说明，所指的默认排序为升序），向有序序列中共需插入N-1次，每次都需要移动次数和直接插入一样；
比较次数远远减少，每趟的比较次数为log2^i[取上整数]，因此整体的比较次数为O(nlog2^n)；

最好的情况：
比较次数和查找次数一致，与初始序列无关，每趟的比较次数为log2^i，移动次数为零。

最坏的情况：
所给序列为逆序序列，那么第i个插入需移动i+1次（i>=2），i累加至N，共移动(N-1)(N+4)/2;

空间效率：
仅使用了常数个辅助单元，所以空间复杂度为O(1).

*/
